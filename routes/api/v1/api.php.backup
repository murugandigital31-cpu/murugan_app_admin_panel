<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Api\V1\GuestUserController;
use App\Http\Controllers\Api\V1\CustomerController;
use App\Http\Controllers\Api\V1\CustomerWalletController;
use App\Http\Controllers\Api\V1\OfflinePaymentMethodController;
use App\Http\Controllers\Api\V1\DeliverymanController;
use App\Http\Controllers\Api\V1\BannerController;
use App\Http\Controllers\Api\V1\CategoryController;
use App\Http\Controllers\Api\V1\ConfigController;
use App\Http\Controllers\Api\V1\ConversationController;
use App\Http\Controllers\Api\V1\CouponController;
use App\Http\Controllers\Api\V1\DeliveryManReviewController;
use App\Http\Controllers\Api\V1\LoyaltyPointController;
use App\Http\Controllers\Api\V1\MapApiController;
use App\Http\Controllers\Api\V1\NotificationController;
use App\Http\Controllers\Api\V1\OfferController;
use App\Http\Controllers\Api\V1\OrderController;
use App\Http\Controllers\Api\V1\WishlistController;
use App\Http\Controllers\Api\V1\TimeSlotController;
use App\Http\Controllers\Api\V1\ProductController;
use App\Http\Controllers\Api\V1\TodaysArrivalController;
use App\Http\Controllers\Api\V1\Auth\CustomerAuthController;
use App\Http\Controllers\Api\V1\Auth\PasswordResetController;
use App\Http\Controllers\Api\V1\Auth\DeliveryManLoginController;

Route::group(['namespace' => 'Api\V1', 'middleware'=>'localization'], function () {

    Route::group(['prefix' => 'auth', 'namespace' => 'Auth'], function () {
        Route::post('register', [CustomerAuthController::class, 'registration']);
        Route::post('login', [CustomerAuthController::class, 'login']);
        Route::post('social-customer-login', [CustomerAuthController::class, 'customerSocialLogin']);

        Route::post('check-phone', [CustomerAuthController::class, 'checkPhone']);
        Route::post('verify-phone', [CustomerAuthController::class, 'verifyPhone']);
        Route::post('check-email', [CustomerAuthController::class, 'checkEmail']);
        Route::post('verify-email', [CustomerAuthController::class, 'verifyEmail']);
        Route::post('firebase-auth-verify', [CustomerAuthController::class, 'firebaseAuthVerify']);
        Route::post('verify-otp', [CustomerAuthController::class, 'verifyOTP']);
        Route::post('registration-with-otp', [CustomerAuthController::class, 'registrationWithOTP']);
        Route::post('existing-account-check', [CustomerAuthController::class, 'existingAccountCheck']);
        Route::post('registration-with-social-media', [CustomerAuthController::class, 'registrationWithSocialMedia']);

        Route::post('forgot-password', [PasswordResetController::class, 'resetPasswordRequest']);
        Route::post('verify-token', [PasswordResetController::class, 'verifyToken']);
        Route::put('reset-password', [PasswordResetController::class, 'resetPasswordSubmit']);

        Route::group(['prefix' => 'delivery-man'], function () {
            Route::post('register', [DeliveryManLoginController::class, 'registration']);
            Route::post('login', [DeliveryManLoginController::class, 'login']);
        });
    });

    Route::group(['prefix' => 'config'], function () {
        Route::get('/', [ConfigController::class, 'configuration']);
        Route::get('delivery-fee', [ConfigController::class, 'deliveryFree']);
    });

    Route::group(['prefix' => 'products'], function () {
        Route::get('all', [ProductController::class, 'getAllProducts']);
        Route::get('latest', [ProductController::class, 'getLatestProducts']);
        Route::get('popular', [ProductController::class, 'getPopularProducts']);
        Route::get('discounted', [ProductController::class, 'getDiscountedProducts']);
        Route::get('search', [ProductController::class, 'getSearchedProducts']);
        Route::get('details/{id}', [ProductController::class, 'getProduct']);
        Route::get('related-products/{product_id}', [ProductController::class, 'getRelatedProducts']);
        Route::get('reviews/{product_id}', [ProductController::class, 'getProductReviews']);
        Route::get('rating/{product_id}', [ProductController::class, 'getProductRating']);
        Route::get('daily-needs', [ProductController::class, 'getDailyNeedProducts']);
        Route::post('reviews/submit', [ProductController::class, 'submitProductReview'])->middleware('auth:api');

        Route::group(['prefix' => 'favorite', 'middleware' => ['auth:api', 'customer_is_block']], function () {
            Route::get('/', [ProductController::class, 'getFavoriteProducts']);
            Route::post('/', [ProductController::class, 'addFavoriteProducts']);
            Route::delete('/', [ProductController::class, 'removeFavoriteProducts']);
        });

        Route::get('featured', [ProductController::class, 'featuredProducts']);
        Route::get('most-viewed', [ProductController::class, 'getMostViewedProducts']);
        Route::get('trending', [ProductController::class, 'getTrendingProducts']);
        Route::get('recommended', [ProductController::class, 'getRecommendedProducts']);
        Route::get('most-reviewed', [ProductController::class, 'getMostReviewedProducts']);
    });

    Route::group(['prefix' => 'todays-arrivals'], function () {
        Route::get('/', [TodaysArrivalController::class, 'index']);
        Route::get('/{id}', [TodaysArrivalController::class, 'show']);
        Route::get('/date-range', [TodaysArrivalController::class, 'getByDateRange']);
        Route::get('/branches', [TodaysArrivalController::class, 'branches']);
        Route::post('/{id}/whatsapp-checkout', [TodaysArrivalController::class, 'whatsappCheckout']);
    });

    Route::group(['prefix' => 'banners'], function () {
        Route::get('/', [BannerController::class, 'getBanners']);
    });

    Route::group(['prefix' => 'notifications'], function () {
        Route::get('/', [NotificationController::class, 'getNotifications']);
    });

    Route::group(['prefix' => 'categories'], function () {
        Route::get('/', [CategoryController::class, 'getCategories']);
        Route::get('childes/{category_id}', [CategoryController::class, 'getChildes']);
        Route::get('products/{category_id}', [CategoryController::class, 'getProducts']);
        Route::get('products/{category_id}/all', [CategoryController::class, 'getAllProducts']);
    });

    Route::group(['prefix' => 'customer', 'middleware' => ['auth:api', 'customer_is_block']], function () {
        Route::get('info', [CustomerController::class, 'info']);
        Route::put('update-profile', [CustomerController::class, 'updateProfile']);
        Route::post('verify-profile-info', [CustomerController::class, 'verifyProfileInfo']);
        Route::put('cm-firebase-token', [CustomerController::class, 'updateFirebaseToken']);
        Route::delete('remove-account', [CustomerController::class, 'removeAccount']);

        Route::group(['prefix' => 'address', 'middleware' => 'guest_user'], function () {
            Route::get('list', [CustomerController::class, 'addressList'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::post('add', [CustomerController::class, 'addNewAddress'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::put('update/{id}', [CustomerController::class, 'updateAddress'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::delete('delete', [CustomerController::class, 'deleteAddress'])->withoutMiddleware(['auth:api', 'customer_is_block']);
        });
        Route::get('last-ordered-address', [CustomerController::class, 'lastOrderedAddress']);

        Route::group(['prefix' => 'order', 'middleware' => 'guest_user'], function () {
            Route::get('list', [OrderController::class, 'getOrderList'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::post('details', [OrderController::class, 'getOrderDetails'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::post('place', [OrderController::class, 'placeOrder'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::put('cancel', [OrderController::class, 'cancelOrder'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::post('track', [OrderController::class, 'trackOrder'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::put('payment-method', [OrderController::class, 'updatePaymentMethod'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::post('store-offline-data', [OrderController::class, 'storeOfflinePaymentData'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::post('switch-payment-method', [OrderController::class, 'switchPaymentMethod'])->withoutMiddleware(['auth:api', 'customer_is_block']);
            Route::get('switch-digital-payment-response', [OrderController::class, 'switchDigitalPaymentOrderResponse'])->withoutMiddleware(['auth:api', 'customer_is_block']);
        });
        Route::group(['prefix' => 'message'], function () {
            //customer-admin
            Route::get('get-admin-message', [ConversationController::class, 'getAdminMessage']);
            Route::post('send-admin-message', [ConversationController::class, 'storeAdminMessage']);
            //customer-deliveryman
            Route::get('get-order-message', [ConversationController::class, 'getMessageByOrder']);
            Route::post('send/{sender_type}', [ConversationController::class, 'storeMessageByOrder']);

        });

        Route::group(['prefix' => 'wish-list'], function () {
            Route::get('/', [WishlistController::class, 'getWishlist']);
            Route::post('add', [WishlistController::class, 'addToWishlist']);
            Route::delete('remove', [WishlistController::class, 'removeFromWishlist']);
        });

        Route::post('transfer-point-to-wallet', [CustomerWalletController::class, 'transferLoyaltyPointToWallet']);
        Route::get('wallet-transactions', [CustomerWalletController::class, 'walletTransactions']);
        Route::get('bonus/list', [CustomerWalletController::class, 'walletBonusList']);

        Route::get('loyalty-point-transactions', [LoyaltyPointController::class, 'pointTransactions']);

    });

    Route::group(['prefix' => 'coupon', 'middleware' => ['auth:api', 'customer_is_block']], function () {
        Route::get('list', [CouponController::class, 'list'])->withoutMiddleware(['auth:api', 'customer_is_block']);
        Route::get('apply', [CouponController::class, 'apply'])->withoutMiddleware(['auth:api', 'customer_is_block']);
    });

    Route::group(['prefix' => 'timeSlot'], function () {
        Route::get('/', [TimeSlotController::class, 'getTimeSlot']);
    });

    Route::group(['prefix' => 'mapapi'], function () {
        Route::get('place-api-autocomplete', [MapApiController::class, 'placeApiAutocomplete']);
        Route::get('distance-api', [MapApiController::class, 'distanceApi']);
        Route::get('place-api-details', [MapApiController::class, 'placeApiDetails']);
        Route::get('geocode-api', [MapApiController::class, 'geocodeApi']);
    });

    Route::group(['prefix' => 'flash-deals'], function () {
        Route::get('/', [OfferController::class, 'getFlashDeal']);
        Route::get('products/{flash_deal_id}', [OfferController::class, 'getFlashDealProducts']);
    });

    Route::post('subscribe-newsletter', [CustomerController::class, 'subscribeNewsletter']);

    Route::group(['prefix' => 'delivery-man'], function () {
        Route::group(['middleware' => 'deliveryman_is_active'], function () {
            Route::get('profile', [DeliverymanController::class, 'getProfile']);
            Route::get('current-orders', [DeliverymanController::class, 'getCurrentOrders']);
            Route::get('all-orders', [DeliverymanController::class, 'getAllOrders']);
            Route::post('record-location-data', [DeliverymanController::class, 'recordLocationData']);
            Route::get('order-delivery-history', [DeliverymanController::class, 'getOrderHistory']);
            Route::put('update-order-status', [DeliverymanController::class, 'updateOrderStatus']);
            Route::put('update-payment-status', [DeliverymanController::class, 'orderPaymentStatusUpdate']);
            Route::post('order-details', [DeliverymanController::class, 'getOrderDetails']);
            Route::put('update-fcm-token', [DeliverymanController::class, 'updateFcmToken']);
            Route::get('order-model', [DeliverymanController::class, 'orderModel']);
            Route::get('orders-count', [DeliverymanController::class, 'getOrdersCount']);
        });
        Route::get('last-location', [DeliverymanController::class, 'getLastLocation']);


        //delivery-man message
        Route::group(['prefix' => 'message'], function () {
            Route::post('get-message', [ConversationController::class, 'getOrderMessageForDeliveryman']);
            Route::post('send/{sender_type}', [ConversationController::class, 'storeMessageByOrder']);
        });

        Route::group(['prefix' => 'reviews', 'middleware' => ['auth:api', 'customer_is_block']], function () {
            Route::get('/{delivery_man_id}', [DeliveryManReviewController::class, 'getReviews']);
            Route::get('rating/{delivery_man_id}', [DeliveryManReviewController::class, 'getRating']);
            Route::post('/submit', [DeliveryManReviewController::class, 'submitReview']);
        });
    });

    Route::group(['prefix' => 'guest'], function () {
        Route::post('/add', [GuestUserController::class, 'guestStore']);
    });

    Route::group(['prefix' => 'offline-payment-method'], function () {
        Route::get('/list', [OfflinePaymentMethodController::class, 'list']);
    });

    Route::post('customer/change-language', [CustomerController::class, 'changeLanguage']);
    Route::post('delivery-man/change-language', [DeliverymanController::class, 'changeLanguage']);

    // Today's Arrivals API routes (note: plural "arrivals" to match Flutter app)
    Route::group(['prefix' => 'todays-arrivals'], function () {
        // Super simple test endpoint
        Route::get('/simple-test', function() {
            return response()->json(['test' => 'success', 'data' => []], 200, [
                'Content-Type' => 'application/json; charset=UTF-8'
            ]);
        });
        
        // Minimal working endpoint from controller
        Route::get('/minimal', [TodaysArrivalController::class, 'minimal']);
        
        // Debug endpoint from controller
        Route::get('/debug', [TodaysArrivalController::class, 'debug']);
        
        // Static minimal working endpoint
        Route::get('/static', function() {
            return response()->json([
                'success' => true,
                'message' => 'Today\'s arrivals retrieved successfully',
                'data' => [
                    'arrivals' => [
                        [
                            'id' => 5,
                            'title' => 'Fruits arrival',
                            'description' => 'test',
                            'arrival_date' => '2025-10-06',
                            'arrival_date_formatted' => 'Oct 06, 2025',
                            'poster_images' => ['https://testapp.muruganflowersuae.com/uploads/arrivals/1759734461_68e36abdef7c1.png'],
                            'main_poster' => 'https://testapp.muruganflowersuae.com/uploads/arrivals/1759734461_68e36abdee91c.png',
                            'products_count' => 2,
                            'branches_count' => 1,
                            'branches' => [
                                [
                                    'id' => 1,
                                    'name' => 'Main Branch',
                                    'phone' => '1234567890',
                                    'whatsapp_number' => '1234567890',
                                    'address' => 'Test Address',
                                    'latitude' => null,
                                    'longitude' => null
                                ]
                            ],
                            'whatsapp_message' => 'Hi! I\'m interested in products from today\'s arrival.',
                            'sort_order' => 0,
                            'created_at' => '2025-10-06T07:07:41.000000Z',
                            'updated_at' => '2025-10-06T07:07:41.000000Z'
                        ]
                    ],
                    'total_count' => 1,
                    'limit' => 10,
                    'offset' => 0,
                    'date' => '2025-10-06'
                ]
            ]);
        });
        
        Route::get('/test', function() {
            return response()->json([
                'success' => true,
                'message' => 'API routing is working',
                'timestamp' => now(),
            ]);
        });
        Route::get('/simple', function() {
            try {
                $arrivals = \App\Model\TodaysArrival::active()->appVisible()->get();
                return response()->json([
                    'success' => true,
                    'message' => 'Simple arrivals retrieved',
                    'count' => $arrivals->count(),
                    'data' => $arrivals->map(function($arrival) {
                        return [
                            'id' => $arrival->id,
                            'title' => $arrival->title,
                            'branch_id_raw' => $arrival->branch_id,
                            'product_ids_raw' => $arrival->product_ids,
                        ];
                    })
                ]);
            } catch (\Exception $e) {
                return response()->json([
                    'success' => false,
                    'error' => $e->getMessage(),
                    'line' => $e->getLine(),
                    'file' => basename($e->getFile())
                ], 500);
            }
        });
        Route::get('/controller-test', function() {
            try {
                $controller = new \App\Http\Controllers\Api\V1\TodaysArrivalController();
                return response()->json([
                    'success' => true,
                    'message' => 'Controller can be instantiated',
                    'controller_class' => get_class($controller)
                ]);
            } catch (\Exception $e) {
                return response()->json([
                    'success' => false,
                    'error' => $e->getMessage(),
                    'line' => $e->getLine(),
                    'file' => basename($e->getFile())
                ], 500);
            }
        });
        Route::get('/diagnose', function() {
            $diagnostics = [];
            
            try {
                // Test database connection
                $diagnostics['database'] = \DB::connection()->getDatabaseName();
                
                // Test model classes
                $diagnostics['models'] = [
                    'TodaysArrival_exists' => class_exists(\App\Model\TodaysArrival::class),
                    'TodaysArrivalBranch_exists' => class_exists(\App\Model\TodaysArrivalBranch::class),
                    'Product_exists' => class_exists(\App\Model\Product::class),
                ];
                
                // Test simple query
                $count = \App\Model\TodaysArrival::count();
                $diagnostics['arrivals_count'] = $count;
                
                // Test specific arrival
                $arrival = \App\Model\TodaysArrival::first();
                if ($arrival) {
                    $diagnostics['sample_arrival'] = [
                        'id' => $arrival->id,
                        'title' => $arrival->title,
                        'branch_id' => $arrival->branch_id,
                        'branch_id_type' => gettype($arrival->branch_id),
                        'product_ids' => $arrival->product_ids,
                        'product_ids_type' => gettype($arrival->product_ids),
                        'is_active' => $arrival->is_active,
                        'show_in_app' => $arrival->show_in_app,
                    ];
                }
                
                return response()->json([
                    'success' => true,
                    'diagnostics' => $diagnostics
                ]);
                
            } catch (\Exception $e) {
                return response()->json([
                    'success' => false,
                    'error' => $e->getMessage(),
                    'line' => $e->getLine(),
                    'file' => basename($e->getFile()),
                    'diagnostics' => $diagnostics
                ], 500);
            }
        });
        Route::get('/', [TodaysArrivalController::class, 'index']);
        Route::get('/branches', [TodaysArrivalController::class, 'branches']);
        Route::get('/date-range', [TodaysArrivalController::class, 'getByDateRange']);
        Route::get('/debug/{id}', function($id) {
            $arrival = \App\Model\TodaysArrival::find($id);
            if (!$arrival) {
                return response()->json(['error' => 'Not found'], 404);
            }
            return response()->json([
                'id' => $arrival->id,
                'title' => $arrival->title,
                'branch_id' => $arrival->branch_id,
                'product_ids' => $arrival->product_ids,
                'is_active' => $arrival->is_active,
                'show_in_app' => $arrival->show_in_app,
                'raw_attributes' => $arrival->getAttributes(),
            ]);
        });
        Route::get('/{id}', [TodaysArrivalController::class, 'show']);
        Route::post('/{id}/whatsapp-checkout', [TodaysArrivalController::class, 'whatsappCheckout']);
    });

});
